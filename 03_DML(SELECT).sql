SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID FROM EMPLOYEES e
WHERE DEPARTMENT_ID = 80
UNION 
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID FROM EMPLOYEES e
WHERE SALARY >= 10000;

SELECT FIRST_NAME, LAST_NAME, MANAGER_ID FROM EMPLOYEES e
UNION
SELECT DEPARTMENT_NAME, TO_CHAR(LOCATION_ID), MANAGER_ID  FROM DEPARTMENTS d;


SELECT FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES e
WHERE SALARY BETWEEN 5000 AND 10000
MINUS 
SELECT FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES e 
WHERE FIRST_NAME LIKE 'A%';


--1. EMPLOYEES 테이블에서 MANAGE_ID가 108이면서 월급이 8000 이상인 직원의
--데이터를 조회하되, 중복이 되는 값을 제거하고 조회 하세요
-- FIRST_NAME, LAST_NAME 컬럼을 이어 붙여서 수행 결과가 하나의 컬럼으로
--나오도록 조회하세요.
SELECT FIRST_NAME || LAST_NAME FROM EMPLOYEES e 
WHERE MANAGER_ID = 108
UNION 
SELECT FIRST_NAME || LAST_NAME FROM EMPLOYEES e2
WHERE SALARY >= 8000;


--2. EMPLOYEES와 DEPARTMENTS 테이블에서 DEPARTMENT_ID, MANAGER_ID가 중복
--되는 데이터를 조회 하세요.
SELECT DEPARTMENT_ID, MANAGER_ID FROM EMPLOYEES e
WHERE DEPARTMENT_ID IS NOT NULL 
AND MANAGER_ID IS NOT NULL 
INTERSECT 
SELECT DEPARTMENT_ID, MANAGER_ID FROM DEPARTMENTS d 
WHERE DEPARTMENT_ID IS NOT NULL 
AND MANAGER_ID IS NOT NULL;



-- INNER JOIN 
-- 오라클 구문
SELECT e.DEPARTMENT_ID, e.FIRST_NAME, d.DEPARTMENT_NAME 
FROM EMPLOYEES e, DEPARTMENTS d
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID ;


-- ANSI 구문
SELECT *
FROM EMPLOYEES e 
JOIN DEPARTMENTS d 
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;


-- LEFT OUTER JOIN
-- 오라클 구문
SELECT * FROM EMPLOYEES e, DEPARTMENTS d
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID(+);

SELECT * FROM EMPLOYEES e 
LEFT OUTER JOIN DEPARTMENTS d 
ON e.EMPLOYEE_ID = d.DEPARTMENT_ID; 


-- RIGHT OUTER JOIN
SELECT * FROM EMPLOYEES e, DEPARTMENTS d 
WHERE e.EMPLOYEE_ID(+) = d.DEPARTMENT_ID;


-- FULL OUTER JOIN
SELECT * FROM EMPLOYEES e 
FULL OUTER JOIN DEPARTMENTS d 
ON E.EMPLOYEE_ID = D.DEPARTMENT_ID;



-- EMPLOYEES 테이블, DEPARTMENTS 테이블
-- 성(FIRST_NAME) + 이름(LAST_NAME) + 부서명(DEPARTMENT_NAME) 조회
SELECT first_name, last_name, DEPARTMENT_NAME FROM EMPLOYEES e 
JOIN DEPARTMENTS d 
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID ;


SELECT * FROM EMPLOYEES e ;
SELECT
	*
FROM
	JOB_HISTORY jh;


-- 직원 이름, 근무 시작일, 근무 종료일'
SELECT
	FIRST_NAME,
	START_DATE,
	END_DATE
FROM
	EMPLOYEES e
JOIN JOB_HISTORY jh 
ON
	e.EMPLOYEE_ID = jh.EMPLOYEE_ID;



-- departend_id 가 100인 직원의 이름과 부서명 조회
SELECT
	FIRST_NAME,
	DEPARTMENT_NAME
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d 
ON
	e.DEPARTMENT_ID = d.DEPARTMENT_ID
WHERE
	e.DEPARTMENT_ID = 100;


-- DEPARTMENT_ID가 80이고, 급여가 12000 이상인 직원의 이름과 부서 이름 조회
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME FROM EMPLOYEES e 
JOIN DEPARTMENTS d 
ON e.DEPARTMENT_ID  = d.DEPARTMENT_ID
WHERE e.DEPARTMENT_ID = 80
AND e.SALARY >= 12000;


-- DEPARTMENT 테이블에서 LOCATION_ID를 기준으로 조인하여 각각의 부서 위치가
-- 어디인지(STREET_ADDRESS, CITY) 확인하기
-- 부서 위치 테이블 : LOCATIONS
-- 컬럼 조회 : DEPARTMENT_ID, STREET_ADDRESS, CITY
SELECT DEPARTMENT_ID, l.STREET_ADDRESS, l.CITY  FROM DEPARTMENTS d 
JOIN LOCATIONS l 
ON d.LOCATION_ID = l.LOCATION_ID ;

-- EMPLOYEES 테이블에서 각각의 직원이 작업한 이력 확인하기
-- 작업 이력 테이블 : JOB_HISTORY
-- 컬럼 조회 : EMPLOYEE_ID, FIRST_NAME, START_DATE, END_DATE
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, jh.START_DATE, jh.END_DATE FROM EMPLOYEES e 
JOIN JOB_HISTORY jh
ON e.EMPLOYEE_ID  = jh.EMPLOYEE_ID ; 


--각각 직원들의 이름, 직무명, 작업 이력
--직원들의 이름 : EMPLOYEES
--직무명 : JOBS
--작업 이력 : JOB_HISTORY
SELECT FIRST_NAME, j.JOB_TITLE, jh.START_DATE, jh.END_DATE FROM EMPLOYEES e
JOIN JOBS j ON e.JOB_ID = j.JOB_ID
JOIN JOB_HISTORY jh ON e.EMPLOYEE_ID = jh.EMPLOYEE_ID;


--직원의 이름, 이메일, 직무이름을 조회하세요.
--EMPLOYEES, JOBS 테이블 조인 사용
SELECT FIRST_NAME, EMAIL, JOB_TITLE FROM EMPLOYEES e 
JOIN JOBS j ON e.JOB_ID = j.JOB_ID; 


--직원의 이름, 속한 부서 이름, 직무, 근무 위치를 조회하세요.
--EMPLOYYES, DEPARTMENT, JOBS, LOCATIONS
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME, j.JOB_TITLE, l.CITY FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
JOIN JOBS j ON e.JOB_ID = j.JOB_ID
JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID; 


--1. 부서 이름이 ‘Sales’ 이거나 ‘Marketing’ 이고, 급여가 5000 이상인 직원 이름 조회
-- EMPLOYEES, DEPARTMENT 테이블
-- 부서 이름 : DEPARTMENT_TITLE
-- 급여 : SALARY
SELECT FIRST_NAME FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
WHERE DEPARTMENT_NAME IN('Sales','Marketing')
AND e.SALARY >= 5000;


--2. 입사일이 2005년 6월 30일 이전인 직원의 직무명 조회
-- EMPLOYEES, JOBS 테이블
-- 입사일 : HIRE_DATE
-- 직무명 : JOB_TITLE
SELECT FIRST_NAME, j.JOB_TITLE FROM EMPLOYEES e
JOIN JOBS j ON e.JOB_ID = j.JOB_ID
WHERE e.HIRE_DATE < '2005-06-30';

--3. 부서 이름이 ‘Shipping’ 이고, 이름이 7글자 이상인 직원의 아이디 조회
-- EMPLOYEES, DEPARTMENT 테이블
-- 부서 이름 : DEPARTMENT_NAME
-- 이름 : FIRST_NAME
-- 직원 아이디 : EMPLOYEE_ID
SELECT FIRST_NAME, EMPLOYEE_ID FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
WHERE DEPARTMENT_NAME= 'Shipping'
AND e.FIRST_NAME LIKE '_______%';


-- 부서별 직원 수 조회 / 부서이름, 직원 수 출력
-- 부서 이름 : DEPARTMENTN 테이블
-- 직원수 : EMPLOYEES 테이블 count
SELECT DEPARTMENT_NAME, COUNT(*) FROM EMPLOYEES e 
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
GROUP BY DEPARTMENT_NAME
HAVING COUNT(*) >= 5 ;


-- 직무별 평균 급여 검색
-- 이중에서 급여가 가장 높은 직무명과 평균 급여 조회
-- 급여 : EMPOLYEES
-- 직무명 : JOBS
SELECT j.JOB_TITLE, avg(SALARY) FROM EMPLOYEES e 
JOIN JOBS j ON e.JOB_ID = j.JOB_ID 
GROUP BY j.JOB_TITLE 
ORDER BY AVG(SALARY) DESC
FETCH FIRST 10 ROW ONLY;  -- TOP N Query

















